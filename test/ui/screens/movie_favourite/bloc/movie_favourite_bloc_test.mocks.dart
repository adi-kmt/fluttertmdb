// Mocks generated by Mockito 5.4.2 from annotations
// in fluttertmdb/test/ui/screens/movie_favourite/bloc/movie_favourite_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fluttertmdb/common/response_wrapper.dart' as _i5;
import 'package:fluttertmdb/domain/models/movie_model.dart' as _i6;
import 'package:fluttertmdb/domain/repositories/movies/movies_repository.dart'
    as _i2;
import 'package:fluttertmdb/domain/usecases/movies/get_favourite_movies_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMoviesRepository_0 extends _i1.SmartFake
    implements _i2.MoviesRepository {
  _FakeMoviesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetFavouriteMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavouriteMoviesUseCase extends _i1.Mock
    implements _i3.GetFavouriteMoviesUseCase {
  @override
  _i2.MoviesRepository get moviesRepository => (super.noSuchMethod(
        Invocation.getter(#moviesRepository),
        returnValue: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#moviesRepository),
        ),
        returnValueForMissingStub: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#moviesRepository),
        ),
      ) as _i2.MoviesRepository);
  @override
  _i4.Future<_i5.ResponseWrapper<List<_i6.MovieModel>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i4.Future<_i5.ResponseWrapper<List<_i6.MovieModel>>>.value(
                _i7.dummyValue<_i5.ResponseWrapper<List<_i6.MovieModel>>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i5.ResponseWrapper<List<_i6.MovieModel>>>.value(
                _i7.dummyValue<_i5.ResponseWrapper<List<_i6.MovieModel>>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i5.ResponseWrapper<List<_i6.MovieModel>>>);
}
